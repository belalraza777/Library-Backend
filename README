# 📚 Library Management System

A web-based application to manage books, users, and borrowing/returning logic for a library.

---

## 🗺️ System Overview

### 👤 Users
- **Signup/Login/Logout:** Users can create accounts, log in, and log out.
- **Roles:** Users can be regular members or admins.

### 📖 Books
- **View Books:** All users can browse and search for books.
- **Admin Controls:** Admins can add, edit, or delete books.

### 🔄 Borrowing & Returning
- **Issue Book:** Users can borrow books if copies are available.
- **Prevent Double Issue:** Users can’t borrow the same book twice at the same time.
- **Request Return:** Users request to return a book.
- **Admin Approval:** Admin reviews and approves the return before it’s finalized.
- **Fine Calculation:** If a book is returned late, a fine is calculated.

### 🛠️ Admin Dashboard
- **View All Issues:** Admin can see all borrowed books and pending return requests.
- **Approve Returns:** Admin can approve or reject return requests.

### 🏠 User Dashboard
- **My Books:** Users can see their currently borrowed books and history.
- **Waitlist Status:** Users can see if they are on a waitlist for any book.

---

## 🧠 Key Business Logic

- **Return Confirmation:** Returns are not finalized until an admin approves, preventing users from cheating the system.
- **Fine Handling:** Late returns automatically calculate a fine, which must be paid before borrowing more books.
- **Role-Based Access:** Only admins can manage books and approve returns.

---

## 💡 Example User Flows

**Borrowing a Book**
1. User logs in and browses books.
2. User clicks "Borrow" on a book with available copies.
3. System checks if user already borrowed it; if not, issues the book and reduces available copies.


**Returning a Book**
1. User clicks "Request Return" on a borrowed book.
2. Admin sees the request and approves it.
3. System marks the book as returned, increases available copies, and calculates any fine.

---

## 📝 What Makes This System Robust?

- **Prevents cheating:** Users can’t fake returns or borrow more than allowed.
- **Admin oversight:** All critical actions (like returns) require admin approval.
- **Transparency:** Users and admins can always see the status of books and requests.
- **Extensible:** Easy to add features like notifications, reports, or more user roles.

---

## 👋 How to Explain in an Interview

> "My Library Management System lets users borrow and return books, with admin approval required for returns . The system ensures no one can cheat by returning books without admin review, and it automatically handles fines for late returns. Admins manage the catalog and all user requests, making the system secure and fair for everyone."

---

## 🚀 Tech Stack

- Node.js, Express.js
- MongoDB & Mongoose


---

## 📂 Project Structure

- `controllers/` – Business logic for books, users, and issues
- `models/` – Mongoose schemas for data
- `routes/` – Express route definitions
- `views/` – EJS templates for UI
- `utils/` – Helper functions and error handling
- `verifyAuth.js` / `verfiyAdmin.js` – Middleware for authentication and admin checks

---

*This README is designed to help any programmer or interviewer quickly understand the core logic and flow of your Library Management System!*